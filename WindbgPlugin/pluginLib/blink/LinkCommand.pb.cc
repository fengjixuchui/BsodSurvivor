// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkCommand.proto

#include "LinkCommand.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace LinkCommand {
class LinkCommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkCommandRequest> _instance;
} _LinkCommandRequest_default_instance_;
class LinkCommandReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkCommandReply> _instance;
} _LinkCommandReply_default_instance_;
class ShouldSendPathDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShouldSendPathDataRequest> _instance;
} _ShouldSendPathDataRequest_default_instance_;
class ShouldSendPathDataReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShouldSendPathDataReply> _instance;
} _ShouldSendPathDataReply_default_instance_;
class SendPathDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendPathDataRequest> _instance;
} _SendPathDataRequest_default_instance_;
class SendPathDataReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendPathDataReply> _instance;
} _SendPathDataReply_default_instance_;
}  // namespace LinkCommand
static void InitDefaultsscc_info_LinkCommandReply_LinkCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LinkCommand::_LinkCommandReply_default_instance_;
    new (ptr) ::LinkCommand::LinkCommandReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkCommand::LinkCommandReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkCommandReply_LinkCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkCommandReply_LinkCommand_2eproto}, {}};

static void InitDefaultsscc_info_LinkCommandRequest_LinkCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LinkCommand::_LinkCommandRequest_default_instance_;
    new (ptr) ::LinkCommand::LinkCommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkCommand::LinkCommandRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkCommandRequest_LinkCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkCommandRequest_LinkCommand_2eproto}, {}};

static void InitDefaultsscc_info_SendPathDataReply_LinkCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LinkCommand::_SendPathDataReply_default_instance_;
    new (ptr) ::LinkCommand::SendPathDataReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkCommand::SendPathDataReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendPathDataReply_LinkCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendPathDataReply_LinkCommand_2eproto}, {}};

static void InitDefaultsscc_info_SendPathDataRequest_LinkCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LinkCommand::_SendPathDataRequest_default_instance_;
    new (ptr) ::LinkCommand::SendPathDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkCommand::SendPathDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendPathDataRequest_LinkCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendPathDataRequest_LinkCommand_2eproto}, {}};

static void InitDefaultsscc_info_ShouldSendPathDataReply_LinkCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LinkCommand::_ShouldSendPathDataReply_default_instance_;
    new (ptr) ::LinkCommand::ShouldSendPathDataReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkCommand::ShouldSendPathDataReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShouldSendPathDataReply_LinkCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShouldSendPathDataReply_LinkCommand_2eproto}, {}};

static void InitDefaultsscc_info_ShouldSendPathDataRequest_LinkCommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LinkCommand::_ShouldSendPathDataRequest_default_instance_;
    new (ptr) ::LinkCommand::ShouldSendPathDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinkCommand::ShouldSendPathDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShouldSendPathDataRequest_LinkCommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShouldSendPathDataRequest_LinkCommand_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LinkCommand_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_LinkCommand_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LinkCommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LinkCommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, clangfilepath_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, ldpath_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, masmpath_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, compilationflags_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, linkerflags_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, filepath_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandRequest, objcopypath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandReply, success_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::LinkCommandReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::ShouldSendPathDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::ShouldSendPathDataRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::ShouldSendPathDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::ShouldSendPathDataReply, should_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::SendPathDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::SendPathDataRequest, path_),
  PROTOBUF_FIELD_OFFSET(::LinkCommand::SendPathDataRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinkCommand::SendPathDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LinkCommand::LinkCommandRequest)},
  { 12, -1, sizeof(::LinkCommand::LinkCommandReply)},
  { 19, -1, sizeof(::LinkCommand::ShouldSendPathDataRequest)},
  { 25, -1, sizeof(::LinkCommand::ShouldSendPathDataReply)},
  { 31, -1, sizeof(::LinkCommand::SendPathDataRequest)},
  { 38, -1, sizeof(::LinkCommand::SendPathDataReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LinkCommand::_LinkCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LinkCommand::_LinkCommandReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LinkCommand::_ShouldSendPathDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LinkCommand::_ShouldSendPathDataReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LinkCommand::_SendPathDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LinkCommand::_SendPathDataReply_default_instance_),
};

const char descriptor_table_protodef_LinkCommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021LinkCommand.proto\022\013LinkCommand\"\243\001\n\022Lin"
  "kCommandRequest\022\025\n\rclangFilePath\030\001 \001(\t\022\016"
  "\n\006ldPath\030\002 \001(\t\022\020\n\010masmPath\030\003 \001(\t\022\030\n\020comp"
  "ilationFlags\030\004 \001(\t\022\023\n\013linkerFlags\030\005 \001(\t\022"
  "\020\n\010filePath\030\006 \001(\t\022\023\n\013objCopyPath\030\007 \001(\t\"4"
  "\n\020LinkCommandReply\022\017\n\007success\030\001 \001(\010\022\017\n\007m"
  "essage\030\002 \001(\t\")\n\031ShouldSendPathDataReques"
  "t\022\014\n\004path\030\001 \001(\t\")\n\027ShouldSendPathDataRep"
  "ly\022\016\n\006should\030\001 \001(\010\"1\n\023SendPathDataReques"
  "t\022\014\n\004path\030\001 \001(\t\022\014\n\004data\030\002 \001(\t\"\023\n\021SendPat"
  "hDataReply2\220\002\n\007Greeter\022K\n\007Compile\022\037.Link"
  "Command.LinkCommandRequest\032\035.LinkCommand"
  ".LinkCommandReply\"\000\022d\n\022ShouldSendPathDat"
  "a\022&.LinkCommand.ShouldSendPathDataReques"
  "t\032$.LinkCommand.ShouldSendPathDataReply\""
  "\000\022R\n\014SendPathData\022 .LinkCommand.SendPath"
  "DataRequest\032\036.LinkCommand.SendPathDataRe"
  "ply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LinkCommand_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LinkCommand_2eproto_sccs[6] = {
  &scc_info_LinkCommandReply_LinkCommand_2eproto.base,
  &scc_info_LinkCommandRequest_LinkCommand_2eproto.base,
  &scc_info_SendPathDataReply_LinkCommand_2eproto.base,
  &scc_info_SendPathDataRequest_LinkCommand_2eproto.base,
  &scc_info_ShouldSendPathDataReply_LinkCommand_2eproto.base,
  &scc_info_ShouldSendPathDataRequest_LinkCommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LinkCommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LinkCommand_2eproto = {
  false, false, descriptor_table_protodef_LinkCommand_2eproto, "LinkCommand.proto", 693,
  &descriptor_table_LinkCommand_2eproto_once, descriptor_table_LinkCommand_2eproto_sccs, descriptor_table_LinkCommand_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_LinkCommand_2eproto::offsets,
  file_level_metadata_LinkCommand_2eproto, 6, file_level_enum_descriptors_LinkCommand_2eproto, file_level_service_descriptors_LinkCommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LinkCommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LinkCommand_2eproto)), true);
namespace LinkCommand {

// ===================================================================

void LinkCommandRequest::InitAsDefaultInstance() {
}
class LinkCommandRequest::_Internal {
 public:
};

LinkCommandRequest::LinkCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkCommand.LinkCommandRequest)
}
LinkCommandRequest::LinkCommandRequest(const LinkCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clangfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clangfilepath().empty()) {
    clangfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clangfilepath(),
      GetArena());
  }
  ldpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ldpath().empty()) {
    ldpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ldpath(),
      GetArena());
  }
  masmpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_masmpath().empty()) {
    masmpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_masmpath(),
      GetArena());
  }
  compilationflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_compilationflags().empty()) {
    compilationflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_compilationflags(),
      GetArena());
  }
  linkerflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_linkerflags().empty()) {
    linkerflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_linkerflags(),
      GetArena());
  }
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filepath(),
      GetArena());
  }
  objcopypath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_objcopypath().empty()) {
    objcopypath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_objcopypath(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LinkCommand.LinkCommandRequest)
}

void LinkCommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkCommandRequest_LinkCommand_2eproto.base);
  clangfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ldpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  masmpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compilationflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linkerflags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objcopypath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LinkCommandRequest::~LinkCommandRequest() {
  // @@protoc_insertion_point(destructor:LinkCommand.LinkCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clangfilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ldpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  masmpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compilationflags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linkerflags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objcopypath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkCommandRequest::ArenaDtor(void* object) {
  LinkCommandRequest* _this = reinterpret_cast< LinkCommandRequest* >(object);
  (void)_this;
}
void LinkCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkCommandRequest& LinkCommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkCommandRequest_LinkCommand_2eproto.base);
  return *internal_default_instance();
}


void LinkCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCommand.LinkCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clangfilepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ldpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  masmpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  compilationflags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  linkerflags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  objcopypath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clangFilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clangfilepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandRequest.clangFilePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ldPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ldpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandRequest.ldPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string masmPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_masmpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandRequest.masmPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string compilationFlags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_compilationflags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandRequest.compilationFlags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string linkerFlags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_linkerflags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandRequest.linkerFlags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filePath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandRequest.filePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string objCopyPath = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_objcopypath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandRequest.objCopyPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkCommand.LinkCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clangFilePath = 1;
  if (this->clangfilepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clangfilepath().data(), static_cast<int>(this->_internal_clangfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandRequest.clangFilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clangfilepath(), target);
  }

  // string ldPath = 2;
  if (this->ldpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ldpath().data(), static_cast<int>(this->_internal_ldpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandRequest.ldPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ldpath(), target);
  }

  // string masmPath = 3;
  if (this->masmpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_masmpath().data(), static_cast<int>(this->_internal_masmpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandRequest.masmPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_masmpath(), target);
  }

  // string compilationFlags = 4;
  if (this->compilationflags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compilationflags().data(), static_cast<int>(this->_internal_compilationflags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandRequest.compilationFlags");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_compilationflags(), target);
  }

  // string linkerFlags = 5;
  if (this->linkerflags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkerflags().data(), static_cast<int>(this->_internal_linkerflags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandRequest.linkerFlags");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_linkerflags(), target);
  }

  // string filePath = 6;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandRequest.filePath");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_filepath(), target);
  }

  // string objCopyPath = 7;
  if (this->objcopypath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objcopypath().data(), static_cast<int>(this->_internal_objcopypath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandRequest.objCopyPath");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_objcopypath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkCommand.LinkCommandRequest)
  return target;
}

size_t LinkCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCommand.LinkCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clangFilePath = 1;
  if (this->clangfilepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clangfilepath());
  }

  // string ldPath = 2;
  if (this->ldpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ldpath());
  }

  // string masmPath = 3;
  if (this->masmpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_masmpath());
  }

  // string compilationFlags = 4;
  if (this->compilationflags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compilationflags());
  }

  // string linkerFlags = 5;
  if (this->linkerflags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkerflags());
  }

  // string filePath = 6;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // string objCopyPath = 7;
  if (this->objcopypath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objcopypath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCommand.LinkCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCommand.LinkCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCommand.LinkCommandRequest)
    MergeFrom(*source);
  }
}

void LinkCommandRequest::MergeFrom(const LinkCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCommand.LinkCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clangfilepath().size() > 0) {
    _internal_set_clangfilepath(from._internal_clangfilepath());
  }
  if (from.ldpath().size() > 0) {
    _internal_set_ldpath(from._internal_ldpath());
  }
  if (from.masmpath().size() > 0) {
    _internal_set_masmpath(from._internal_masmpath());
  }
  if (from.compilationflags().size() > 0) {
    _internal_set_compilationflags(from._internal_compilationflags());
  }
  if (from.linkerflags().size() > 0) {
    _internal_set_linkerflags(from._internal_linkerflags());
  }
  if (from.filepath().size() > 0) {
    _internal_set_filepath(from._internal_filepath());
  }
  if (from.objcopypath().size() > 0) {
    _internal_set_objcopypath(from._internal_objcopypath());
  }
}

void LinkCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCommand.LinkCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkCommandRequest::CopyFrom(const LinkCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCommand.LinkCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkCommandRequest::IsInitialized() const {
  return true;
}

void LinkCommandRequest::InternalSwap(LinkCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clangfilepath_.Swap(&other->clangfilepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ldpath_.Swap(&other->ldpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  masmpath_.Swap(&other->masmpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  compilationflags_.Swap(&other->compilationflags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  linkerflags_.Swap(&other->linkerflags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  objcopypath_.Swap(&other->objcopypath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkCommandReply::InitAsDefaultInstance() {
}
class LinkCommandReply::_Internal {
 public:
};

LinkCommandReply::LinkCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkCommand.LinkCommandReply)
}
LinkCommandReply::LinkCommandReply(const LinkCommandReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:LinkCommand.LinkCommandReply)
}

void LinkCommandReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkCommandReply_LinkCommand_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

LinkCommandReply::~LinkCommandReply() {
  // @@protoc_insertion_point(destructor:LinkCommand.LinkCommandReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkCommandReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkCommandReply::ArenaDtor(void* object) {
  LinkCommandReply* _this = reinterpret_cast< LinkCommandReply* >(object);
  (void)_this;
}
void LinkCommandReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkCommandReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkCommandReply& LinkCommandReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkCommandReply_LinkCommand_2eproto.base);
  return *internal_default_instance();
}


void LinkCommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCommand.LinkCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkCommandReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.LinkCommandReply.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkCommandReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkCommand.LinkCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.LinkCommandReply.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkCommand.LinkCommandReply)
  return target;
}

size_t LinkCommandReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCommand.LinkCommandReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkCommandReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCommand.LinkCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkCommandReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkCommandReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCommand.LinkCommandReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCommand.LinkCommandReply)
    MergeFrom(*source);
  }
}

void LinkCommandReply::MergeFrom(const LinkCommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCommand.LinkCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void LinkCommandReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCommand.LinkCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkCommandReply::CopyFrom(const LinkCommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCommand.LinkCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkCommandReply::IsInitialized() const {
  return true;
}

void LinkCommandReply::InternalSwap(LinkCommandReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkCommandReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShouldSendPathDataRequest::InitAsDefaultInstance() {
}
class ShouldSendPathDataRequest::_Internal {
 public:
};

ShouldSendPathDataRequest::ShouldSendPathDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkCommand.ShouldSendPathDataRequest)
}
ShouldSendPathDataRequest::ShouldSendPathDataRequest(const ShouldSendPathDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LinkCommand.ShouldSendPathDataRequest)
}

void ShouldSendPathDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShouldSendPathDataRequest_LinkCommand_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShouldSendPathDataRequest::~ShouldSendPathDataRequest() {
  // @@protoc_insertion_point(destructor:LinkCommand.ShouldSendPathDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShouldSendPathDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShouldSendPathDataRequest::ArenaDtor(void* object) {
  ShouldSendPathDataRequest* _this = reinterpret_cast< ShouldSendPathDataRequest* >(object);
  (void)_this;
}
void ShouldSendPathDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShouldSendPathDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShouldSendPathDataRequest& ShouldSendPathDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShouldSendPathDataRequest_LinkCommand_2eproto.base);
  return *internal_default_instance();
}


void ShouldSendPathDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCommand.ShouldSendPathDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShouldSendPathDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.ShouldSendPathDataRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShouldSendPathDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkCommand.ShouldSendPathDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.ShouldSendPathDataRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkCommand.ShouldSendPathDataRequest)
  return target;
}

size_t ShouldSendPathDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCommand.ShouldSendPathDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShouldSendPathDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCommand.ShouldSendPathDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShouldSendPathDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShouldSendPathDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCommand.ShouldSendPathDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCommand.ShouldSendPathDataRequest)
    MergeFrom(*source);
  }
}

void ShouldSendPathDataRequest::MergeFrom(const ShouldSendPathDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCommand.ShouldSendPathDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void ShouldSendPathDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCommand.ShouldSendPathDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShouldSendPathDataRequest::CopyFrom(const ShouldSendPathDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCommand.ShouldSendPathDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShouldSendPathDataRequest::IsInitialized() const {
  return true;
}

void ShouldSendPathDataRequest::InternalSwap(ShouldSendPathDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ShouldSendPathDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShouldSendPathDataReply::InitAsDefaultInstance() {
}
class ShouldSendPathDataReply::_Internal {
 public:
};

ShouldSendPathDataReply::ShouldSendPathDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkCommand.ShouldSendPathDataReply)
}
ShouldSendPathDataReply::ShouldSendPathDataReply(const ShouldSendPathDataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  should_ = from.should_;
  // @@protoc_insertion_point(copy_constructor:LinkCommand.ShouldSendPathDataReply)
}

void ShouldSendPathDataReply::SharedCtor() {
  should_ = false;
}

ShouldSendPathDataReply::~ShouldSendPathDataReply() {
  // @@protoc_insertion_point(destructor:LinkCommand.ShouldSendPathDataReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShouldSendPathDataReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShouldSendPathDataReply::ArenaDtor(void* object) {
  ShouldSendPathDataReply* _this = reinterpret_cast< ShouldSendPathDataReply* >(object);
  (void)_this;
}
void ShouldSendPathDataReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShouldSendPathDataReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShouldSendPathDataReply& ShouldSendPathDataReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShouldSendPathDataReply_LinkCommand_2eproto.base);
  return *internal_default_instance();
}


void ShouldSendPathDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCommand.ShouldSendPathDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  should_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShouldSendPathDataReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool should = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          should_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShouldSendPathDataReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkCommand.ShouldSendPathDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool should = 1;
  if (this->should() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_should(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkCommand.ShouldSendPathDataReply)
  return target;
}

size_t ShouldSendPathDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCommand.ShouldSendPathDataReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool should = 1;
  if (this->should() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShouldSendPathDataReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCommand.ShouldSendPathDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ShouldSendPathDataReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShouldSendPathDataReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCommand.ShouldSendPathDataReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCommand.ShouldSendPathDataReply)
    MergeFrom(*source);
  }
}

void ShouldSendPathDataReply::MergeFrom(const ShouldSendPathDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCommand.ShouldSendPathDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.should() != 0) {
    _internal_set_should(from._internal_should());
  }
}

void ShouldSendPathDataReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCommand.ShouldSendPathDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShouldSendPathDataReply::CopyFrom(const ShouldSendPathDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCommand.ShouldSendPathDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShouldSendPathDataReply::IsInitialized() const {
  return true;
}

void ShouldSendPathDataReply::InternalSwap(ShouldSendPathDataReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(should_, other->should_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShouldSendPathDataReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendPathDataRequest::InitAsDefaultInstance() {
}
class SendPathDataRequest::_Internal {
 public:
};

SendPathDataRequest::SendPathDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkCommand.SendPathDataRequest)
}
SendPathDataRequest::SendPathDataRequest(const SendPathDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LinkCommand.SendPathDataRequest)
}

void SendPathDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendPathDataRequest_LinkCommand_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendPathDataRequest::~SendPathDataRequest() {
  // @@protoc_insertion_point(destructor:LinkCommand.SendPathDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendPathDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendPathDataRequest::ArenaDtor(void* object) {
  SendPathDataRequest* _this = reinterpret_cast< SendPathDataRequest* >(object);
  (void)_this;
}
void SendPathDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendPathDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendPathDataRequest& SendPathDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendPathDataRequest_LinkCommand_2eproto.base);
  return *internal_default_instance();
}


void SendPathDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCommand.SendPathDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPathDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.SendPathDataRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LinkCommand.SendPathDataRequest.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendPathDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkCommand.SendPathDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.SendPathDataRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LinkCommand.SendPathDataRequest.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkCommand.SendPathDataRequest)
  return target;
}

size_t SendPathDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCommand.SendPathDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendPathDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCommand.SendPathDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendPathDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendPathDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCommand.SendPathDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCommand.SendPathDataRequest)
    MergeFrom(*source);
  }
}

void SendPathDataRequest::MergeFrom(const SendPathDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCommand.SendPathDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void SendPathDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCommand.SendPathDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPathDataRequest::CopyFrom(const SendPathDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCommand.SendPathDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPathDataRequest::IsInitialized() const {
  return true;
}

void SendPathDataRequest::InternalSwap(SendPathDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPathDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendPathDataReply::InitAsDefaultInstance() {
}
class SendPathDataReply::_Internal {
 public:
};

SendPathDataReply::SendPathDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LinkCommand.SendPathDataReply)
}
SendPathDataReply::SendPathDataReply(const SendPathDataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LinkCommand.SendPathDataReply)
}

void SendPathDataReply::SharedCtor() {
}

SendPathDataReply::~SendPathDataReply() {
  // @@protoc_insertion_point(destructor:LinkCommand.SendPathDataReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendPathDataReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendPathDataReply::ArenaDtor(void* object) {
  SendPathDataReply* _this = reinterpret_cast< SendPathDataReply* >(object);
  (void)_this;
}
void SendPathDataReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendPathDataReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendPathDataReply& SendPathDataReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendPathDataReply_LinkCommand_2eproto.base);
  return *internal_default_instance();
}


void SendPathDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCommand.SendPathDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPathDataReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendPathDataReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkCommand.SendPathDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkCommand.SendPathDataReply)
  return target;
}

size_t SendPathDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCommand.SendPathDataReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendPathDataReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCommand.SendPathDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SendPathDataReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendPathDataReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCommand.SendPathDataReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCommand.SendPathDataReply)
    MergeFrom(*source);
  }
}

void SendPathDataReply::MergeFrom(const SendPathDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCommand.SendPathDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SendPathDataReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCommand.SendPathDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPathDataReply::CopyFrom(const SendPathDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCommand.SendPathDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPathDataReply::IsInitialized() const {
  return true;
}

void SendPathDataReply::InternalSwap(SendPathDataReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPathDataReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LinkCommand
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LinkCommand::LinkCommandRequest* Arena::CreateMaybeMessage< ::LinkCommand::LinkCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkCommand::LinkCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkCommand::LinkCommandReply* Arena::CreateMaybeMessage< ::LinkCommand::LinkCommandReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkCommand::LinkCommandReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkCommand::ShouldSendPathDataRequest* Arena::CreateMaybeMessage< ::LinkCommand::ShouldSendPathDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkCommand::ShouldSendPathDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkCommand::ShouldSendPathDataReply* Arena::CreateMaybeMessage< ::LinkCommand::ShouldSendPathDataReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkCommand::ShouldSendPathDataReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkCommand::SendPathDataRequest* Arena::CreateMaybeMessage< ::LinkCommand::SendPathDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkCommand::SendPathDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkCommand::SendPathDataReply* Arena::CreateMaybeMessage< ::LinkCommand::SendPathDataReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkCommand::SendPathDataReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
