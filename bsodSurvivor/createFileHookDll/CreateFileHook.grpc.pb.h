// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CreateFileHook.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_CreateFileHook_2eproto__INCLUDED
#define GRPC_CreateFileHook_2eproto__INCLUDED

#include "CreateFileHook.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace CreateFileHook {

// The greeting service definition.
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "CreateFileHook.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::CreateFileHook::SendPathDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::SendPathDataReply>> AsyncSendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::SendPathDataReply>>(AsyncSendPathDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::SendPathDataReply>> PrepareAsyncSendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::SendPathDataReply>>(PrepareAsyncSendPathDataRaw(context, request, cq));
    }
    virtual ::grpc::Status ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::CreateFileHook::ShouldSendPathDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::ShouldSendPathDataReply>> AsyncShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::ShouldSendPathDataReply>>(AsyncShouldSendPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::ShouldSendPathDataReply>> PrepareAsyncShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::ShouldSendPathDataReply>>(PrepareAsyncShouldSendPathRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::CreateFileHook::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::Empty>> AsyncClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::Empty>>(AsyncClearPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::Empty>> PrepareAsyncClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::Empty>>(PrepareAsyncClearPathsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::SendPathDataReply>* AsyncSendPathDataRaw(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::SendPathDataReply>* PrepareAsyncSendPathDataRaw(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::ShouldSendPathDataReply>* AsyncShouldSendPathRaw(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::ShouldSendPathDataReply>* PrepareAsyncShouldSendPathRaw(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::Empty>* AsyncClearPathsRaw(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateFileHook::Empty>* PrepareAsyncClearPathsRaw(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::CreateFileHook::SendPathDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>> AsyncSendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>>(AsyncSendPathDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>> PrepareAsyncSendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>>(PrepareAsyncSendPathDataRaw(context, request, cq));
    }
    ::grpc::Status ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::CreateFileHook::ShouldSendPathDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>> AsyncShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>>(AsyncShouldSendPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>> PrepareAsyncShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>>(PrepareAsyncShouldSendPathRaw(context, request, cq));
    }
    ::grpc::Status ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::CreateFileHook::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>> AsyncClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>>(AsyncClearPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>> PrepareAsyncClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>>(PrepareAsyncClearPathsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>* AsyncSendPathDataRaw(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>* PrepareAsyncSendPathDataRaw(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>* AsyncShouldSendPathRaw(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>* PrepareAsyncShouldSendPathRaw(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>* AsyncClearPathsRaw(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>* PrepareAsyncClearPathsRaw(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendPathData_;
    const ::grpc::internal::RpcMethod rpcmethod_ShouldSendPath_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearPaths_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendPathData(::grpc::ServerContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response);
    virtual ::grpc::Status ShouldSendPath(::grpc::ServerContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response);
    virtual ::grpc::Status ClearPaths(::grpc::ServerContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPathData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPathData(::grpc::ServerContext* context, ::CreateFileHook::SendPathDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::CreateFileHook::SendPathDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShouldSendPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShouldSendPath() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ShouldSendPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPath(::grpc::ServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShouldSendPath(::grpc::ServerContext* context, ::CreateFileHook::ShouldSendPathDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::CreateFileHook::ShouldSendPathDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearPaths() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ClearPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearPaths(::grpc::ServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearPaths(::grpc::ServerContext* context, ::CreateFileHook::Empty* request, ::grpc::ServerAsyncResponseWriter< ::CreateFileHook::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendPathData<WithAsyncMethod_ShouldSendPath<WithAsyncMethod_ClearPaths<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendPathData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::CreateFileHook::SendPathDataRequest, ::CreateFileHook::SendPathDataReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response) { return this->SendPathData(context, request, response); }));}
    void SetMessageAllocatorFor_SendPathData(
        ::grpc::experimental::MessageAllocator< ::CreateFileHook::SendPathDataRequest, ::CreateFileHook::SendPathDataReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreateFileHook::SendPathDataRequest, ::CreateFileHook::SendPathDataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendPathData(
      ::grpc::CallbackServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendPathData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShouldSendPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShouldSendPath() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::CreateFileHook::ShouldSendPathDataRequest, ::CreateFileHook::ShouldSendPathDataReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response) { return this->ShouldSendPath(context, request, response); }));}
    void SetMessageAllocatorFor_ShouldSendPath(
        ::grpc::experimental::MessageAllocator< ::CreateFileHook::ShouldSendPathDataRequest, ::CreateFileHook::ShouldSendPathDataReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreateFileHook::ShouldSendPathDataRequest, ::CreateFileHook::ShouldSendPathDataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShouldSendPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPath(::grpc::ServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShouldSendPath(
      ::grpc::CallbackServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShouldSendPath(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClearPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ClearPaths() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CreateFileHook::Empty, ::CreateFileHook::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response) { return this->ClearPaths(context, request, response); }));}
    void SetMessageAllocatorFor_ClearPaths(
        ::grpc::experimental::MessageAllocator< ::CreateFileHook::Empty, ::CreateFileHook::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreateFileHook::Empty, ::CreateFileHook::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClearPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearPaths(::grpc::ServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearPaths(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SendPathData<ExperimentalWithCallbackMethod_ShouldSendPath<ExperimentalWithCallbackMethod_ClearPaths<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SendPathData<ExperimentalWithCallbackMethod_ShouldSendPath<ExperimentalWithCallbackMethod_ClearPaths<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPathData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShouldSendPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShouldSendPath() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ShouldSendPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPath(::grpc::ServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearPaths() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ClearPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearPaths(::grpc::ServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPathData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPathData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShouldSendPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShouldSendPath() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ShouldSendPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPath(::grpc::ServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShouldSendPath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearPaths() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ClearPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearPaths(::grpc::ServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearPaths(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendPathData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendPathData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendPathData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendPathData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShouldSendPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShouldSendPath() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShouldSendPath(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShouldSendPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPath(::grpc::ServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShouldSendPath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShouldSendPath(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClearPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ClearPaths() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearPaths(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ClearPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearPaths(::grpc::ServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearPaths(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendPathData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreateFileHook::SendPathDataRequest, ::CreateFileHook::SendPathDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreateFileHook::SendPathDataRequest, ::CreateFileHook::SendPathDataReply>* streamer) {
                       return this->StreamedSendPathData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::CreateFileHook::SendPathDataRequest* /*request*/, ::CreateFileHook::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendPathData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateFileHook::SendPathDataRequest,::CreateFileHook::SendPathDataReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShouldSendPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShouldSendPath() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreateFileHook::ShouldSendPathDataRequest, ::CreateFileHook::ShouldSendPathDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreateFileHook::ShouldSendPathDataRequest, ::CreateFileHook::ShouldSendPathDataReply>* streamer) {
                       return this->StreamedShouldSendPath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShouldSendPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShouldSendPath(::grpc::ServerContext* /*context*/, const ::CreateFileHook::ShouldSendPathDataRequest* /*request*/, ::CreateFileHook::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShouldSendPath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateFileHook::ShouldSendPathDataRequest,::CreateFileHook::ShouldSendPathDataReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearPaths() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreateFileHook::Empty, ::CreateFileHook::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreateFileHook::Empty, ::CreateFileHook::Empty>* streamer) {
                       return this->StreamedClearPaths(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearPaths(::grpc::ServerContext* /*context*/, const ::CreateFileHook::Empty* /*request*/, ::CreateFileHook::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearPaths(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateFileHook::Empty,::CreateFileHook::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendPathData<WithStreamedUnaryMethod_ShouldSendPath<WithStreamedUnaryMethod_ClearPaths<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendPathData<WithStreamedUnaryMethod_ShouldSendPath<WithStreamedUnaryMethod_ClearPaths<Service > > > StreamedService;
};

}  // namespace CreateFileHook


#endif  // GRPC_CreateFileHook_2eproto__INCLUDED
