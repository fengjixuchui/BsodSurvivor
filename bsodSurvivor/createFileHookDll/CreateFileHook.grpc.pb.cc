// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CreateFileHook.proto

#include "CreateFileHook.pb.h"
#include "CreateFileHook.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace CreateFileHook {

static const char* Greeter_method_names[] = {
  "/CreateFileHook.Greeter/SendPathData",
  "/CreateFileHook.Greeter/ShouldSendPath",
  "/CreateFileHook.Greeter/ClearPaths",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendPathData_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShouldSendPath_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearPaths_(Greeter_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::CreateFileHook::SendPathDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendPathData_, context, request, response);
}

void Greeter::Stub::experimental_async::SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendPathData_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SendPathData(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendPathData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>* Greeter::Stub::PrepareAsyncSendPathDataRaw(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CreateFileHook::SendPathDataReply>::Create(channel_.get(), cq, rpcmethod_SendPathData_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::CreateFileHook::SendPathDataReply>* Greeter::Stub::AsyncSendPathDataRaw(::grpc::ClientContext* context, const ::CreateFileHook::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPathDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::CreateFileHook::ShouldSendPathDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShouldSendPath_, context, request, response);
}

void Greeter::Stub::experimental_async::ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShouldSendPath_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ShouldSendPath(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ShouldSendPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>* Greeter::Stub::PrepareAsyncShouldSendPathRaw(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CreateFileHook::ShouldSendPathDataReply>::Create(channel_.get(), cq, rpcmethod_ShouldSendPath_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::CreateFileHook::ShouldSendPathDataReply>* Greeter::Stub::AsyncShouldSendPathRaw(::grpc::ClientContext* context, const ::CreateFileHook::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShouldSendPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::CreateFileHook::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearPaths_, context, request, response);
}

void Greeter::Stub::experimental_async::ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearPaths_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ClearPaths(::grpc::ClientContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearPaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>* Greeter::Stub::PrepareAsyncClearPathsRaw(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::CreateFileHook::Empty>::Create(channel_.get(), cq, rpcmethod_ClearPaths_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::CreateFileHook::Empty>* Greeter::Stub::AsyncClearPathsRaw(::grpc::ClientContext* context, const ::CreateFileHook::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearPathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::CreateFileHook::SendPathDataRequest, ::CreateFileHook::SendPathDataReply>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CreateFileHook::SendPathDataRequest* req,
             ::CreateFileHook::SendPathDataReply* resp) {
               return service->SendPathData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::CreateFileHook::ShouldSendPathDataRequest, ::CreateFileHook::ShouldSendPathDataReply>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CreateFileHook::ShouldSendPathDataRequest* req,
             ::CreateFileHook::ShouldSendPathDataReply* resp) {
               return service->ShouldSendPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::CreateFileHook::Empty, ::CreateFileHook::Empty>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CreateFileHook::Empty* req,
             ::CreateFileHook::Empty* resp) {
               return service->ClearPaths(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::SendPathData(::grpc::ServerContext* context, const ::CreateFileHook::SendPathDataRequest* request, ::CreateFileHook::SendPathDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ShouldSendPath(::grpc::ServerContext* context, const ::CreateFileHook::ShouldSendPathDataRequest* request, ::CreateFileHook::ShouldSendPathDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ClearPaths(::grpc::ServerContext* context, const ::CreateFileHook::Empty* request, ::CreateFileHook::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CreateFileHook

