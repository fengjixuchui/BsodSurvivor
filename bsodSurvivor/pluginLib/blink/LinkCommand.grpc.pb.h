// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blink/LinkCommand.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_blink_2fLinkCommand_2eproto__INCLUDED
#define GRPC_blink_2fLinkCommand_2eproto__INCLUDED

#include "blink/LinkCommand.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace LinkCommand {

// The greeting service definition.
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "LinkCommand.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    std::unique_ptr< ::grpc::ClientReaderInterface< ::LinkCommand::LinkCommandReply>> Compile(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::LinkCommand::LinkCommandReply>>(CompileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::LinkCommand::LinkCommandReply>> AsyncCompile(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::LinkCommand::LinkCommandReply>>(AsyncCompileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::LinkCommand::LinkCommandReply>> PrepareAsyncCompile(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::LinkCommand::LinkCommandReply>>(PrepareAsyncCompileRaw(context, request, cq));
    }
    virtual ::grpc::Status ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::LinkCommand::ShouldSendPathDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::ShouldSendPathDataReply>> AsyncShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::ShouldSendPathDataReply>>(AsyncShouldSendPathDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::ShouldSendPathDataReply>> PrepareAsyncShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::ShouldSendPathDataReply>>(PrepareAsyncShouldSendPathDataRaw(context, request, cq));
    }
    virtual ::grpc::Status SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::LinkCommand::SendPathDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::SendPathDataReply>> AsyncSendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::SendPathDataReply>>(AsyncSendPathDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::SendPathDataReply>> PrepareAsyncSendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::SendPathDataReply>>(PrepareAsyncSendPathDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Compile(::grpc::ClientContext* context, ::LinkCommand::LinkCommandRequest* request, ::grpc::ClientReadReactor< ::LinkCommand::LinkCommandReply>* reactor) = 0;
      #else
      virtual void Compile(::grpc::ClientContext* context, ::LinkCommand::LinkCommandRequest* request, ::grpc::experimental::ClientReadReactor< ::LinkCommand::LinkCommandReply>* reactor) = 0;
      #endif
      virtual void ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::LinkCommand::LinkCommandReply>* CompileRaw(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::LinkCommand::LinkCommandReply>* AsyncCompileRaw(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::LinkCommand::LinkCommandReply>* PrepareAsyncCompileRaw(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::ShouldSendPathDataReply>* AsyncShouldSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::ShouldSendPathDataReply>* PrepareAsyncShouldSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::SendPathDataReply>* AsyncSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LinkCommand::SendPathDataReply>* PrepareAsyncSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::LinkCommand::LinkCommandReply>> Compile(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::LinkCommand::LinkCommandReply>>(CompileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::LinkCommand::LinkCommandReply>> AsyncCompile(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::LinkCommand::LinkCommandReply>>(AsyncCompileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::LinkCommand::LinkCommandReply>> PrepareAsyncCompile(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::LinkCommand::LinkCommandReply>>(PrepareAsyncCompileRaw(context, request, cq));
    }
    ::grpc::Status ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::LinkCommand::ShouldSendPathDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::ShouldSendPathDataReply>> AsyncShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::ShouldSendPathDataReply>>(AsyncShouldSendPathDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::ShouldSendPathDataReply>> PrepareAsyncShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::ShouldSendPathDataReply>>(PrepareAsyncShouldSendPathDataRaw(context, request, cq));
    }
    ::grpc::Status SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::LinkCommand::SendPathDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::SendPathDataReply>> AsyncSendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::SendPathDataReply>>(AsyncSendPathDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::SendPathDataReply>> PrepareAsyncSendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LinkCommand::SendPathDataReply>>(PrepareAsyncSendPathDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Compile(::grpc::ClientContext* context, ::LinkCommand::LinkCommandRequest* request, ::grpc::ClientReadReactor< ::LinkCommand::LinkCommandReply>* reactor) override;
      #else
      void Compile(::grpc::ClientContext* context, ::LinkCommand::LinkCommandRequest* request, ::grpc::experimental::ClientReadReactor< ::LinkCommand::LinkCommandReply>* reactor) override;
      #endif
      void ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShouldSendPathData(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendPathData(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::LinkCommand::LinkCommandReply>* CompileRaw(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request) override;
    ::grpc::ClientAsyncReader< ::LinkCommand::LinkCommandReply>* AsyncCompileRaw(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::LinkCommand::LinkCommandReply>* PrepareAsyncCompileRaw(::grpc::ClientContext* context, const ::LinkCommand::LinkCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LinkCommand::ShouldSendPathDataReply>* AsyncShouldSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LinkCommand::ShouldSendPathDataReply>* PrepareAsyncShouldSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::ShouldSendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LinkCommand::SendPathDataReply>* AsyncSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LinkCommand::SendPathDataReply>* PrepareAsyncSendPathDataRaw(::grpc::ClientContext* context, const ::LinkCommand::SendPathDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Compile_;
    const ::grpc::internal::RpcMethod rpcmethod_ShouldSendPathData_;
    const ::grpc::internal::RpcMethod rpcmethod_SendPathData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status Compile(::grpc::ServerContext* context, const ::LinkCommand::LinkCommandRequest* request, ::grpc::ServerWriter< ::LinkCommand::LinkCommandReply>* writer);
    virtual ::grpc::Status ShouldSendPathData(::grpc::ServerContext* context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response);
    virtual ::grpc::Status SendPathData(::grpc::ServerContext* context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Compile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/, ::grpc::ServerWriter< ::LinkCommand::LinkCommandReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompile(::grpc::ServerContext* context, ::LinkCommand::LinkCommandRequest* request, ::grpc::ServerAsyncWriter< ::LinkCommand::LinkCommandReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShouldSendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShouldSendPathData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ShouldSendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShouldSendPathData(::grpc::ServerContext* context, ::LinkCommand::ShouldSendPathDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::LinkCommand::ShouldSendPathDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPathData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPathData(::grpc::ServerContext* context, ::LinkCommand::SendPathDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::LinkCommand::SendPathDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Compile<WithAsyncMethod_ShouldSendPathData<WithAsyncMethod_SendPathData<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Compile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::LinkCommand::LinkCommandRequest, ::LinkCommand::LinkCommandReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LinkCommand::LinkCommandRequest* request) { return this->Compile(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/, ::grpc::ServerWriter< ::LinkCommand::LinkCommandReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::LinkCommand::LinkCommandReply>* Compile(
      ::grpc::CallbackServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::LinkCommand::LinkCommandReply>* Compile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShouldSendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShouldSendPathData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::LinkCommand::ShouldSendPathDataRequest, ::LinkCommand::ShouldSendPathDataReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LinkCommand::ShouldSendPathDataRequest* request, ::LinkCommand::ShouldSendPathDataReply* response) { return this->ShouldSendPathData(context, request, response); }));}
    void SetMessageAllocatorFor_ShouldSendPathData(
        ::grpc::experimental::MessageAllocator< ::LinkCommand::ShouldSendPathDataRequest, ::LinkCommand::ShouldSendPathDataReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LinkCommand::ShouldSendPathDataRequest, ::LinkCommand::ShouldSendPathDataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShouldSendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShouldSendPathData(
      ::grpc::CallbackServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShouldSendPathData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendPathData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::LinkCommand::SendPathDataRequest, ::LinkCommand::SendPathDataReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::LinkCommand::SendPathDataRequest* request, ::LinkCommand::SendPathDataReply* response) { return this->SendPathData(context, request, response); }));}
    void SetMessageAllocatorFor_SendPathData(
        ::grpc::experimental::MessageAllocator< ::LinkCommand::SendPathDataRequest, ::LinkCommand::SendPathDataReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LinkCommand::SendPathDataRequest, ::LinkCommand::SendPathDataReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendPathData(
      ::grpc::CallbackServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendPathData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Compile<ExperimentalWithCallbackMethod_ShouldSendPathData<ExperimentalWithCallbackMethod_SendPathData<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Compile<ExperimentalWithCallbackMethod_ShouldSendPathData<ExperimentalWithCallbackMethod_SendPathData<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Compile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/, ::grpc::ServerWriter< ::LinkCommand::LinkCommandReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShouldSendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShouldSendPathData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ShouldSendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPathData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Compile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/, ::grpc::ServerWriter< ::LinkCommand::LinkCommandReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShouldSendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShouldSendPathData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ShouldSendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShouldSendPathData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPathData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPathData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Compile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Compile(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/, ::grpc::ServerWriter< ::LinkCommand::LinkCommandReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Compile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Compile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShouldSendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShouldSendPathData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShouldSendPathData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShouldSendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldSendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShouldSendPathData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShouldSendPathData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendPathData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendPathData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendPathData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendPathData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShouldSendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShouldSendPathData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LinkCommand::ShouldSendPathDataRequest, ::LinkCommand::ShouldSendPathDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LinkCommand::ShouldSendPathDataRequest, ::LinkCommand::ShouldSendPathDataReply>* streamer) {
                       return this->StreamedShouldSendPathData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShouldSendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShouldSendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::ShouldSendPathDataRequest* /*request*/, ::LinkCommand::ShouldSendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShouldSendPathData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LinkCommand::ShouldSendPathDataRequest,::LinkCommand::ShouldSendPathDataReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendPathData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendPathData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LinkCommand::SendPathDataRequest, ::LinkCommand::SendPathDataReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LinkCommand::SendPathDataRequest, ::LinkCommand::SendPathDataReply>* streamer) {
                       return this->StreamedSendPathData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendPathData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPathData(::grpc::ServerContext* /*context*/, const ::LinkCommand::SendPathDataRequest* /*request*/, ::LinkCommand::SendPathDataReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendPathData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LinkCommand::SendPathDataRequest,::LinkCommand::SendPathDataReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ShouldSendPathData<WithStreamedUnaryMethod_SendPathData<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Compile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::LinkCommand::LinkCommandRequest, ::LinkCommand::LinkCommandReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::LinkCommand::LinkCommandRequest, ::LinkCommand::LinkCommandReply>* streamer) {
                       return this->StreamedCompile(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Compile(::grpc::ServerContext* /*context*/, const ::LinkCommand::LinkCommandRequest* /*request*/, ::grpc::ServerWriter< ::LinkCommand::LinkCommandReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCompile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::LinkCommand::LinkCommandRequest,::LinkCommand::LinkCommandReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Compile<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Compile<WithStreamedUnaryMethod_ShouldSendPathData<WithStreamedUnaryMethod_SendPathData<Service > > > StreamedService;
};

}  // namespace LinkCommand


#endif  // GRPC_blink_2fLinkCommand_2eproto__INCLUDED
