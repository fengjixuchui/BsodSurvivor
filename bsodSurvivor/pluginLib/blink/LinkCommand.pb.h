// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LinkCommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LinkCommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LinkCommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LinkCommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LinkCommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LinkCommand_2eproto;
namespace LinkCommand {
class LinkCommandReply;
class LinkCommandReplyDefaultTypeInternal;
extern LinkCommandReplyDefaultTypeInternal _LinkCommandReply_default_instance_;
class LinkCommandRequest;
class LinkCommandRequestDefaultTypeInternal;
extern LinkCommandRequestDefaultTypeInternal _LinkCommandRequest_default_instance_;
class SendPathDataReply;
class SendPathDataReplyDefaultTypeInternal;
extern SendPathDataReplyDefaultTypeInternal _SendPathDataReply_default_instance_;
class SendPathDataRequest;
class SendPathDataRequestDefaultTypeInternal;
extern SendPathDataRequestDefaultTypeInternal _SendPathDataRequest_default_instance_;
class ShouldSendPathDataReply;
class ShouldSendPathDataReplyDefaultTypeInternal;
extern ShouldSendPathDataReplyDefaultTypeInternal _ShouldSendPathDataReply_default_instance_;
class ShouldSendPathDataRequest;
class ShouldSendPathDataRequestDefaultTypeInternal;
extern ShouldSendPathDataRequestDefaultTypeInternal _ShouldSendPathDataRequest_default_instance_;
}  // namespace LinkCommand
PROTOBUF_NAMESPACE_OPEN
template<> ::LinkCommand::LinkCommandReply* Arena::CreateMaybeMessage<::LinkCommand::LinkCommandReply>(Arena*);
template<> ::LinkCommand::LinkCommandRequest* Arena::CreateMaybeMessage<::LinkCommand::LinkCommandRequest>(Arena*);
template<> ::LinkCommand::SendPathDataReply* Arena::CreateMaybeMessage<::LinkCommand::SendPathDataReply>(Arena*);
template<> ::LinkCommand::SendPathDataRequest* Arena::CreateMaybeMessage<::LinkCommand::SendPathDataRequest>(Arena*);
template<> ::LinkCommand::ShouldSendPathDataReply* Arena::CreateMaybeMessage<::LinkCommand::ShouldSendPathDataReply>(Arena*);
template<> ::LinkCommand::ShouldSendPathDataRequest* Arena::CreateMaybeMessage<::LinkCommand::ShouldSendPathDataRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LinkCommand {

// ===================================================================

class LinkCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkCommand.LinkCommandRequest) */ {
 public:
  inline LinkCommandRequest() : LinkCommandRequest(nullptr) {}
  virtual ~LinkCommandRequest();

  LinkCommandRequest(const LinkCommandRequest& from);
  LinkCommandRequest(LinkCommandRequest&& from) noexcept
    : LinkCommandRequest() {
    *this = ::std::move(from);
  }

  inline LinkCommandRequest& operator=(const LinkCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkCommandRequest& operator=(LinkCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkCommandRequest* internal_default_instance() {
    return reinterpret_cast<const LinkCommandRequest*>(
               &_LinkCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinkCommandRequest& a, LinkCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkCommandRequest* New() const final {
    return CreateMaybeMessage<LinkCommandRequest>(nullptr);
  }

  LinkCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkCommandRequest& from);
  void MergeFrom(const LinkCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkCommand.LinkCommandRequest";
  }
  protected:
  explicit LinkCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LinkCommand_2eproto);
    return ::descriptor_table_LinkCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClangFilePathFieldNumber = 1,
    kLdPathFieldNumber = 2,
    kMasmPathFieldNumber = 3,
    kCompilationFlagsFieldNumber = 4,
    kLinkerFlagsFieldNumber = 5,
    kFilePathFieldNumber = 6,
    kObjCopyPathFieldNumber = 7,
  };
  // string clangFilePath = 1;
  void clear_clangfilepath();
  const std::string& clangfilepath() const;
  void set_clangfilepath(const std::string& value);
  void set_clangfilepath(std::string&& value);
  void set_clangfilepath(const char* value);
  void set_clangfilepath(const char* value, size_t size);
  std::string* mutable_clangfilepath();
  std::string* release_clangfilepath();
  void set_allocated_clangfilepath(std::string* clangfilepath);
  private:
  const std::string& _internal_clangfilepath() const;
  void _internal_set_clangfilepath(const std::string& value);
  std::string* _internal_mutable_clangfilepath();
  public:

  // string ldPath = 2;
  void clear_ldpath();
  const std::string& ldpath() const;
  void set_ldpath(const std::string& value);
  void set_ldpath(std::string&& value);
  void set_ldpath(const char* value);
  void set_ldpath(const char* value, size_t size);
  std::string* mutable_ldpath();
  std::string* release_ldpath();
  void set_allocated_ldpath(std::string* ldpath);
  private:
  const std::string& _internal_ldpath() const;
  void _internal_set_ldpath(const std::string& value);
  std::string* _internal_mutable_ldpath();
  public:

  // string masmPath = 3;
  void clear_masmpath();
  const std::string& masmpath() const;
  void set_masmpath(const std::string& value);
  void set_masmpath(std::string&& value);
  void set_masmpath(const char* value);
  void set_masmpath(const char* value, size_t size);
  std::string* mutable_masmpath();
  std::string* release_masmpath();
  void set_allocated_masmpath(std::string* masmpath);
  private:
  const std::string& _internal_masmpath() const;
  void _internal_set_masmpath(const std::string& value);
  std::string* _internal_mutable_masmpath();
  public:

  // string compilationFlags = 4;
  void clear_compilationflags();
  const std::string& compilationflags() const;
  void set_compilationflags(const std::string& value);
  void set_compilationflags(std::string&& value);
  void set_compilationflags(const char* value);
  void set_compilationflags(const char* value, size_t size);
  std::string* mutable_compilationflags();
  std::string* release_compilationflags();
  void set_allocated_compilationflags(std::string* compilationflags);
  private:
  const std::string& _internal_compilationflags() const;
  void _internal_set_compilationflags(const std::string& value);
  std::string* _internal_mutable_compilationflags();
  public:

  // string linkerFlags = 5;
  void clear_linkerflags();
  const std::string& linkerflags() const;
  void set_linkerflags(const std::string& value);
  void set_linkerflags(std::string&& value);
  void set_linkerflags(const char* value);
  void set_linkerflags(const char* value, size_t size);
  std::string* mutable_linkerflags();
  std::string* release_linkerflags();
  void set_allocated_linkerflags(std::string* linkerflags);
  private:
  const std::string& _internal_linkerflags() const;
  void _internal_set_linkerflags(const std::string& value);
  std::string* _internal_mutable_linkerflags();
  public:

  // string filePath = 6;
  void clear_filepath();
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // string objCopyPath = 7;
  void clear_objcopypath();
  const std::string& objcopypath() const;
  void set_objcopypath(const std::string& value);
  void set_objcopypath(std::string&& value);
  void set_objcopypath(const char* value);
  void set_objcopypath(const char* value, size_t size);
  std::string* mutable_objcopypath();
  std::string* release_objcopypath();
  void set_allocated_objcopypath(std::string* objcopypath);
  private:
  const std::string& _internal_objcopypath() const;
  void _internal_set_objcopypath(const std::string& value);
  std::string* _internal_mutable_objcopypath();
  public:

  // @@protoc_insertion_point(class_scope:LinkCommand.LinkCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clangfilepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ldpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masmpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compilationflags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linkerflags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objcopypath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LinkCommand_2eproto;
};
// -------------------------------------------------------------------

class LinkCommandReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkCommand.LinkCommandReply) */ {
 public:
  inline LinkCommandReply() : LinkCommandReply(nullptr) {}
  virtual ~LinkCommandReply();

  LinkCommandReply(const LinkCommandReply& from);
  LinkCommandReply(LinkCommandReply&& from) noexcept
    : LinkCommandReply() {
    *this = ::std::move(from);
  }

  inline LinkCommandReply& operator=(const LinkCommandReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkCommandReply& operator=(LinkCommandReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkCommandReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkCommandReply* internal_default_instance() {
    return reinterpret_cast<const LinkCommandReply*>(
               &_LinkCommandReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LinkCommandReply& a, LinkCommandReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkCommandReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkCommandReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkCommandReply* New() const final {
    return CreateMaybeMessage<LinkCommandReply>(nullptr);
  }

  LinkCommandReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkCommandReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkCommandReply& from);
  void MergeFrom(const LinkCommandReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkCommandReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkCommand.LinkCommandReply";
  }
  protected:
  explicit LinkCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LinkCommand_2eproto);
    return ::descriptor_table_LinkCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kIsLoggingFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool isLogging = 2;
  void clear_islogging();
  bool islogging() const;
  void set_islogging(bool value);
  private:
  bool _internal_islogging() const;
  void _internal_set_islogging(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LinkCommand.LinkCommandReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  bool islogging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LinkCommand_2eproto;
};
// -------------------------------------------------------------------

class ShouldSendPathDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkCommand.ShouldSendPathDataRequest) */ {
 public:
  inline ShouldSendPathDataRequest() : ShouldSendPathDataRequest(nullptr) {}
  virtual ~ShouldSendPathDataRequest();

  ShouldSendPathDataRequest(const ShouldSendPathDataRequest& from);
  ShouldSendPathDataRequest(ShouldSendPathDataRequest&& from) noexcept
    : ShouldSendPathDataRequest() {
    *this = ::std::move(from);
  }

  inline ShouldSendPathDataRequest& operator=(const ShouldSendPathDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShouldSendPathDataRequest& operator=(ShouldSendPathDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShouldSendPathDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShouldSendPathDataRequest* internal_default_instance() {
    return reinterpret_cast<const ShouldSendPathDataRequest*>(
               &_ShouldSendPathDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShouldSendPathDataRequest& a, ShouldSendPathDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShouldSendPathDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShouldSendPathDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShouldSendPathDataRequest* New() const final {
    return CreateMaybeMessage<ShouldSendPathDataRequest>(nullptr);
  }

  ShouldSendPathDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShouldSendPathDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShouldSendPathDataRequest& from);
  void MergeFrom(const ShouldSendPathDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShouldSendPathDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkCommand.ShouldSendPathDataRequest";
  }
  protected:
  explicit ShouldSendPathDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LinkCommand_2eproto);
    return ::descriptor_table_LinkCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:LinkCommand.ShouldSendPathDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LinkCommand_2eproto;
};
// -------------------------------------------------------------------

class ShouldSendPathDataReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkCommand.ShouldSendPathDataReply) */ {
 public:
  inline ShouldSendPathDataReply() : ShouldSendPathDataReply(nullptr) {}
  virtual ~ShouldSendPathDataReply();

  ShouldSendPathDataReply(const ShouldSendPathDataReply& from);
  ShouldSendPathDataReply(ShouldSendPathDataReply&& from) noexcept
    : ShouldSendPathDataReply() {
    *this = ::std::move(from);
  }

  inline ShouldSendPathDataReply& operator=(const ShouldSendPathDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShouldSendPathDataReply& operator=(ShouldSendPathDataReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShouldSendPathDataReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShouldSendPathDataReply* internal_default_instance() {
    return reinterpret_cast<const ShouldSendPathDataReply*>(
               &_ShouldSendPathDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShouldSendPathDataReply& a, ShouldSendPathDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShouldSendPathDataReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShouldSendPathDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShouldSendPathDataReply* New() const final {
    return CreateMaybeMessage<ShouldSendPathDataReply>(nullptr);
  }

  ShouldSendPathDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShouldSendPathDataReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShouldSendPathDataReply& from);
  void MergeFrom(const ShouldSendPathDataReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShouldSendPathDataReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkCommand.ShouldSendPathDataReply";
  }
  protected:
  explicit ShouldSendPathDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LinkCommand_2eproto);
    return ::descriptor_table_LinkCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShouldFieldNumber = 1,
  };
  // bool should = 1;
  void clear_should();
  bool should() const;
  void set_should(bool value);
  private:
  bool _internal_should() const;
  void _internal_set_should(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LinkCommand.ShouldSendPathDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool should_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LinkCommand_2eproto;
};
// -------------------------------------------------------------------

class SendPathDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkCommand.SendPathDataRequest) */ {
 public:
  inline SendPathDataRequest() : SendPathDataRequest(nullptr) {}
  virtual ~SendPathDataRequest();

  SendPathDataRequest(const SendPathDataRequest& from);
  SendPathDataRequest(SendPathDataRequest&& from) noexcept
    : SendPathDataRequest() {
    *this = ::std::move(from);
  }

  inline SendPathDataRequest& operator=(const SendPathDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPathDataRequest& operator=(SendPathDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendPathDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendPathDataRequest* internal_default_instance() {
    return reinterpret_cast<const SendPathDataRequest*>(
               &_SendPathDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendPathDataRequest& a, SendPathDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPathDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPathDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendPathDataRequest* New() const final {
    return CreateMaybeMessage<SendPathDataRequest>(nullptr);
  }

  SendPathDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendPathDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendPathDataRequest& from);
  void MergeFrom(const SendPathDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPathDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkCommand.SendPathDataRequest";
  }
  protected:
  explicit SendPathDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LinkCommand_2eproto);
    return ::descriptor_table_LinkCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:LinkCommand.SendPathDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LinkCommand_2eproto;
};
// -------------------------------------------------------------------

class SendPathDataReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkCommand.SendPathDataReply) */ {
 public:
  inline SendPathDataReply() : SendPathDataReply(nullptr) {}
  virtual ~SendPathDataReply();

  SendPathDataReply(const SendPathDataReply& from);
  SendPathDataReply(SendPathDataReply&& from) noexcept
    : SendPathDataReply() {
    *this = ::std::move(from);
  }

  inline SendPathDataReply& operator=(const SendPathDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPathDataReply& operator=(SendPathDataReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendPathDataReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendPathDataReply* internal_default_instance() {
    return reinterpret_cast<const SendPathDataReply*>(
               &_SendPathDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendPathDataReply& a, SendPathDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPathDataReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPathDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendPathDataReply* New() const final {
    return CreateMaybeMessage<SendPathDataReply>(nullptr);
  }

  SendPathDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendPathDataReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendPathDataReply& from);
  void MergeFrom(const SendPathDataReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPathDataReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkCommand.SendPathDataReply";
  }
  protected:
  explicit SendPathDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LinkCommand_2eproto);
    return ::descriptor_table_LinkCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LinkCommand.SendPathDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LinkCommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinkCommandRequest

// string clangFilePath = 1;
inline void LinkCommandRequest::clear_clangfilepath() {
  clangfilepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandRequest::clangfilepath() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandRequest.clangFilePath)
  return _internal_clangfilepath();
}
inline void LinkCommandRequest::set_clangfilepath(const std::string& value) {
  _internal_set_clangfilepath(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandRequest.clangFilePath)
}
inline std::string* LinkCommandRequest::mutable_clangfilepath() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandRequest.clangFilePath)
  return _internal_mutable_clangfilepath();
}
inline const std::string& LinkCommandRequest::_internal_clangfilepath() const {
  return clangfilepath_.Get();
}
inline void LinkCommandRequest::_internal_set_clangfilepath(const std::string& value) {
  
  clangfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandRequest::set_clangfilepath(std::string&& value) {
  
  clangfilepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandRequest.clangFilePath)
}
inline void LinkCommandRequest::set_clangfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clangfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandRequest.clangFilePath)
}
inline void LinkCommandRequest::set_clangfilepath(const char* value,
    size_t size) {
  
  clangfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandRequest.clangFilePath)
}
inline std::string* LinkCommandRequest::_internal_mutable_clangfilepath() {
  
  return clangfilepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandRequest::release_clangfilepath() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandRequest.clangFilePath)
  return clangfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandRequest::set_allocated_clangfilepath(std::string* clangfilepath) {
  if (clangfilepath != nullptr) {
    
  } else {
    
  }
  clangfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clangfilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandRequest.clangFilePath)
}

// string ldPath = 2;
inline void LinkCommandRequest::clear_ldpath() {
  ldpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandRequest::ldpath() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandRequest.ldPath)
  return _internal_ldpath();
}
inline void LinkCommandRequest::set_ldpath(const std::string& value) {
  _internal_set_ldpath(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandRequest.ldPath)
}
inline std::string* LinkCommandRequest::mutable_ldpath() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandRequest.ldPath)
  return _internal_mutable_ldpath();
}
inline const std::string& LinkCommandRequest::_internal_ldpath() const {
  return ldpath_.Get();
}
inline void LinkCommandRequest::_internal_set_ldpath(const std::string& value) {
  
  ldpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandRequest::set_ldpath(std::string&& value) {
  
  ldpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandRequest.ldPath)
}
inline void LinkCommandRequest::set_ldpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ldpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandRequest.ldPath)
}
inline void LinkCommandRequest::set_ldpath(const char* value,
    size_t size) {
  
  ldpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandRequest.ldPath)
}
inline std::string* LinkCommandRequest::_internal_mutable_ldpath() {
  
  return ldpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandRequest::release_ldpath() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandRequest.ldPath)
  return ldpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandRequest::set_allocated_ldpath(std::string* ldpath) {
  if (ldpath != nullptr) {
    
  } else {
    
  }
  ldpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ldpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandRequest.ldPath)
}

// string masmPath = 3;
inline void LinkCommandRequest::clear_masmpath() {
  masmpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandRequest::masmpath() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandRequest.masmPath)
  return _internal_masmpath();
}
inline void LinkCommandRequest::set_masmpath(const std::string& value) {
  _internal_set_masmpath(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandRequest.masmPath)
}
inline std::string* LinkCommandRequest::mutable_masmpath() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandRequest.masmPath)
  return _internal_mutable_masmpath();
}
inline const std::string& LinkCommandRequest::_internal_masmpath() const {
  return masmpath_.Get();
}
inline void LinkCommandRequest::_internal_set_masmpath(const std::string& value) {
  
  masmpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandRequest::set_masmpath(std::string&& value) {
  
  masmpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandRequest.masmPath)
}
inline void LinkCommandRequest::set_masmpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  masmpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandRequest.masmPath)
}
inline void LinkCommandRequest::set_masmpath(const char* value,
    size_t size) {
  
  masmpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandRequest.masmPath)
}
inline std::string* LinkCommandRequest::_internal_mutable_masmpath() {
  
  return masmpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandRequest::release_masmpath() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandRequest.masmPath)
  return masmpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandRequest::set_allocated_masmpath(std::string* masmpath) {
  if (masmpath != nullptr) {
    
  } else {
    
  }
  masmpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), masmpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandRequest.masmPath)
}

// string compilationFlags = 4;
inline void LinkCommandRequest::clear_compilationflags() {
  compilationflags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandRequest::compilationflags() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandRequest.compilationFlags)
  return _internal_compilationflags();
}
inline void LinkCommandRequest::set_compilationflags(const std::string& value) {
  _internal_set_compilationflags(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandRequest.compilationFlags)
}
inline std::string* LinkCommandRequest::mutable_compilationflags() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandRequest.compilationFlags)
  return _internal_mutable_compilationflags();
}
inline const std::string& LinkCommandRequest::_internal_compilationflags() const {
  return compilationflags_.Get();
}
inline void LinkCommandRequest::_internal_set_compilationflags(const std::string& value) {
  
  compilationflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandRequest::set_compilationflags(std::string&& value) {
  
  compilationflags_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandRequest.compilationFlags)
}
inline void LinkCommandRequest::set_compilationflags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compilationflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandRequest.compilationFlags)
}
inline void LinkCommandRequest::set_compilationflags(const char* value,
    size_t size) {
  
  compilationflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandRequest.compilationFlags)
}
inline std::string* LinkCommandRequest::_internal_mutable_compilationflags() {
  
  return compilationflags_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandRequest::release_compilationflags() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandRequest.compilationFlags)
  return compilationflags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandRequest::set_allocated_compilationflags(std::string* compilationflags) {
  if (compilationflags != nullptr) {
    
  } else {
    
  }
  compilationflags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compilationflags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandRequest.compilationFlags)
}

// string linkerFlags = 5;
inline void LinkCommandRequest::clear_linkerflags() {
  linkerflags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandRequest::linkerflags() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandRequest.linkerFlags)
  return _internal_linkerflags();
}
inline void LinkCommandRequest::set_linkerflags(const std::string& value) {
  _internal_set_linkerflags(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandRequest.linkerFlags)
}
inline std::string* LinkCommandRequest::mutable_linkerflags() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandRequest.linkerFlags)
  return _internal_mutable_linkerflags();
}
inline const std::string& LinkCommandRequest::_internal_linkerflags() const {
  return linkerflags_.Get();
}
inline void LinkCommandRequest::_internal_set_linkerflags(const std::string& value) {
  
  linkerflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandRequest::set_linkerflags(std::string&& value) {
  
  linkerflags_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandRequest.linkerFlags)
}
inline void LinkCommandRequest::set_linkerflags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  linkerflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandRequest.linkerFlags)
}
inline void LinkCommandRequest::set_linkerflags(const char* value,
    size_t size) {
  
  linkerflags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandRequest.linkerFlags)
}
inline std::string* LinkCommandRequest::_internal_mutable_linkerflags() {
  
  return linkerflags_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandRequest::release_linkerflags() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandRequest.linkerFlags)
  return linkerflags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandRequest::set_allocated_linkerflags(std::string* linkerflags) {
  if (linkerflags != nullptr) {
    
  } else {
    
  }
  linkerflags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), linkerflags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandRequest.linkerFlags)
}

// string filePath = 6;
inline void LinkCommandRequest::clear_filepath() {
  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandRequest::filepath() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandRequest.filePath)
  return _internal_filepath();
}
inline void LinkCommandRequest::set_filepath(const std::string& value) {
  _internal_set_filepath(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandRequest.filePath)
}
inline std::string* LinkCommandRequest::mutable_filepath() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandRequest.filePath)
  return _internal_mutable_filepath();
}
inline const std::string& LinkCommandRequest::_internal_filepath() const {
  return filepath_.Get();
}
inline void LinkCommandRequest::_internal_set_filepath(const std::string& value) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandRequest::set_filepath(std::string&& value) {
  
  filepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandRequest.filePath)
}
inline void LinkCommandRequest::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandRequest.filePath)
}
inline void LinkCommandRequest::set_filepath(const char* value,
    size_t size) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandRequest.filePath)
}
inline std::string* LinkCommandRequest::_internal_mutable_filepath() {
  
  return filepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandRequest::release_filepath() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandRequest.filePath)
  return filepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandRequest::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandRequest.filePath)
}

// string objCopyPath = 7;
inline void LinkCommandRequest::clear_objcopypath() {
  objcopypath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandRequest::objcopypath() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandRequest.objCopyPath)
  return _internal_objcopypath();
}
inline void LinkCommandRequest::set_objcopypath(const std::string& value) {
  _internal_set_objcopypath(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandRequest.objCopyPath)
}
inline std::string* LinkCommandRequest::mutable_objcopypath() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandRequest.objCopyPath)
  return _internal_mutable_objcopypath();
}
inline const std::string& LinkCommandRequest::_internal_objcopypath() const {
  return objcopypath_.Get();
}
inline void LinkCommandRequest::_internal_set_objcopypath(const std::string& value) {
  
  objcopypath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandRequest::set_objcopypath(std::string&& value) {
  
  objcopypath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandRequest.objCopyPath)
}
inline void LinkCommandRequest::set_objcopypath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objcopypath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandRequest.objCopyPath)
}
inline void LinkCommandRequest::set_objcopypath(const char* value,
    size_t size) {
  
  objcopypath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandRequest.objCopyPath)
}
inline std::string* LinkCommandRequest::_internal_mutable_objcopypath() {
  
  return objcopypath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandRequest::release_objcopypath() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandRequest.objCopyPath)
  return objcopypath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandRequest::set_allocated_objcopypath(std::string* objcopypath) {
  if (objcopypath != nullptr) {
    
  } else {
    
  }
  objcopypath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objcopypath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandRequest.objCopyPath)
}

// -------------------------------------------------------------------

// LinkCommandReply

// bool success = 1;
inline void LinkCommandReply::clear_success() {
  success_ = false;
}
inline bool LinkCommandReply::_internal_success() const {
  return success_;
}
inline bool LinkCommandReply::success() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandReply.success)
  return _internal_success();
}
inline void LinkCommandReply::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LinkCommandReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandReply.success)
}

// bool isLogging = 2;
inline void LinkCommandReply::clear_islogging() {
  islogging_ = false;
}
inline bool LinkCommandReply::_internal_islogging() const {
  return islogging_;
}
inline bool LinkCommandReply::islogging() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandReply.isLogging)
  return _internal_islogging();
}
inline void LinkCommandReply::_internal_set_islogging(bool value) {
  
  islogging_ = value;
}
inline void LinkCommandReply::set_islogging(bool value) {
  _internal_set_islogging(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandReply.isLogging)
}

// string message = 3;
inline void LinkCommandReply::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LinkCommandReply::message() const {
  // @@protoc_insertion_point(field_get:LinkCommand.LinkCommandReply.message)
  return _internal_message();
}
inline void LinkCommandReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:LinkCommand.LinkCommandReply.message)
}
inline std::string* LinkCommandReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.LinkCommandReply.message)
  return _internal_mutable_message();
}
inline const std::string& LinkCommandReply::_internal_message() const {
  return message_.Get();
}
inline void LinkCommandReply::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinkCommandReply::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.LinkCommandReply.message)
}
inline void LinkCommandReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.LinkCommandReply.message)
}
inline void LinkCommandReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.LinkCommandReply.message)
}
inline std::string* LinkCommandReply::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinkCommandReply::release_message() {
  // @@protoc_insertion_point(field_release:LinkCommand.LinkCommandReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkCommandReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.LinkCommandReply.message)
}

// -------------------------------------------------------------------

// ShouldSendPathDataRequest

// string path = 1;
inline void ShouldSendPathDataRequest::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShouldSendPathDataRequest::path() const {
  // @@protoc_insertion_point(field_get:LinkCommand.ShouldSendPathDataRequest.path)
  return _internal_path();
}
inline void ShouldSendPathDataRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:LinkCommand.ShouldSendPathDataRequest.path)
}
inline std::string* ShouldSendPathDataRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.ShouldSendPathDataRequest.path)
  return _internal_mutable_path();
}
inline const std::string& ShouldSendPathDataRequest::_internal_path() const {
  return path_.Get();
}
inline void ShouldSendPathDataRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShouldSendPathDataRequest::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.ShouldSendPathDataRequest.path)
}
inline void ShouldSendPathDataRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.ShouldSendPathDataRequest.path)
}
inline void ShouldSendPathDataRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.ShouldSendPathDataRequest.path)
}
inline std::string* ShouldSendPathDataRequest::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShouldSendPathDataRequest::release_path() {
  // @@protoc_insertion_point(field_release:LinkCommand.ShouldSendPathDataRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShouldSendPathDataRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.ShouldSendPathDataRequest.path)
}

// -------------------------------------------------------------------

// ShouldSendPathDataReply

// bool should = 1;
inline void ShouldSendPathDataReply::clear_should() {
  should_ = false;
}
inline bool ShouldSendPathDataReply::_internal_should() const {
  return should_;
}
inline bool ShouldSendPathDataReply::should() const {
  // @@protoc_insertion_point(field_get:LinkCommand.ShouldSendPathDataReply.should)
  return _internal_should();
}
inline void ShouldSendPathDataReply::_internal_set_should(bool value) {
  
  should_ = value;
}
inline void ShouldSendPathDataReply::set_should(bool value) {
  _internal_set_should(value);
  // @@protoc_insertion_point(field_set:LinkCommand.ShouldSendPathDataReply.should)
}

// -------------------------------------------------------------------

// SendPathDataRequest

// string path = 1;
inline void SendPathDataRequest::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendPathDataRequest::path() const {
  // @@protoc_insertion_point(field_get:LinkCommand.SendPathDataRequest.path)
  return _internal_path();
}
inline void SendPathDataRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:LinkCommand.SendPathDataRequest.path)
}
inline std::string* SendPathDataRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.SendPathDataRequest.path)
  return _internal_mutable_path();
}
inline const std::string& SendPathDataRequest::_internal_path() const {
  return path_.Get();
}
inline void SendPathDataRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendPathDataRequest::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.SendPathDataRequest.path)
}
inline void SendPathDataRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.SendPathDataRequest.path)
}
inline void SendPathDataRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.SendPathDataRequest.path)
}
inline std::string* SendPathDataRequest::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendPathDataRequest::release_path() {
  // @@protoc_insertion_point(field_release:LinkCommand.SendPathDataRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendPathDataRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.SendPathDataRequest.path)
}

// string data = 2;
inline void SendPathDataRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendPathDataRequest::data() const {
  // @@protoc_insertion_point(field_get:LinkCommand.SendPathDataRequest.data)
  return _internal_data();
}
inline void SendPathDataRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:LinkCommand.SendPathDataRequest.data)
}
inline std::string* SendPathDataRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LinkCommand.SendPathDataRequest.data)
  return _internal_mutable_data();
}
inline const std::string& SendPathDataRequest::_internal_data() const {
  return data_.Get();
}
inline void SendPathDataRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendPathDataRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LinkCommand.SendPathDataRequest.data)
}
inline void SendPathDataRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LinkCommand.SendPathDataRequest.data)
}
inline void SendPathDataRequest::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LinkCommand.SendPathDataRequest.data)
}
inline std::string* SendPathDataRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendPathDataRequest::release_data() {
  // @@protoc_insertion_point(field_release:LinkCommand.SendPathDataRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendPathDataRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LinkCommand.SendPathDataRequest.data)
}

// -------------------------------------------------------------------

// SendPathDataReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LinkCommand

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LinkCommand_2eproto
